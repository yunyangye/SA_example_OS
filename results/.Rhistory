}
if (length(col_data)>0) {
ex.dat1 <- ex.dat[,-col_data]
}
else {
ex.dat1 <- ex.dat
}
value_1_1 = value_1-length(col_data)
value_2_1 = value_2-length(col_data)
value_3_1 = value_3-length(col_data)
ans.gam <- sensitivity(ex.dat1, x.pos=1:value_1_1, y.pos=value_2_1:value_3_1, surface='gam')
print(ans.gam)
return(ex.dat)
}
#run the function main
main('GAM','3')
#normalization 0~1
normalit<-function(m){
(m - min(m))/(max(m)-min(m))
}
main <- function(method,building_type) {
#install all the packages that are needed
#install.packages('corpcor', repos='http://cran.rstudio.com/')
#install.packages('fields', repos='http://cran.rstudio.com/')
#install.packages('gam', repos='http://cran.rstudio.com/')
#install.packages('gbm', repos='http://cran.rstudio.com/')
#install.packages('locfit', repos='http://cran.rstudio.com/')
#install.packages('maptree', repos='http://cran.rstudio.com/')
#install.packages('mda', repos='http://cran.rstudio.com/')
#install.packages('mlegp', repos='http://cran.rstudio.com/')
#install.packages('polspline', repos='http://cran.rstudio.com/')
#install.packages('quadprog', repos='http://cran.rstudio.com/')
#install.packages('randomForest', repos='http://cran.rstudio.com/')
#install.packages('spam', repos='http://cran.rstudio.com/')
#install.packages('tgp', repos='http://cran.rstudio.com/')
#install.packages('./CompModSA_1.2.tar.gz', repos = NULL, type = 'source')
#load the package CompModSA and related packages
library('CompModSA', lib.loc='~/R/x86_64-pc-linux-gnu-library/3.3')
#install package RMySQL
#install.packages('./RMySQL_0.10.13.tar.gz', repos = NULL, type = 'source')
#load the package RMySQL
library('RMySQL')
database <- dbConnect(MySQL(),user="root",db="ashrae1771",host="localhost")
data <- dbReadTable(database,"detaildata1")
#select data
line_data <- c()
for (row in 1:nrow(data)) {
if (as.numeric(data[row,1]) != as.numeric(building_type)) {
line_data <- c(line_data, row)
}
}
if (length(line_data)>0) {
data1 <- data[-line_data,]
} else {
data1 <- data
}
#transfer all values in the matrix into float
for (row in 1:nrow(data1)) {
data1[order(as.numeric(row)),]
}
#normalization 0~1
ex.dat <- apply(data1,2,normalit)
ex.dat[is.nan(ex.dat)] <- 1
#prepare the input and output
value_1 = as.numeric('5')
value_2 = value_1+1
value_3 = as.numeric('5')+as.numeric('2')
#select method
#GAM
col_data <- c()
for (i in 1:ncol(ex.dat)) {
if (max(ex.dat[,i]) == min(ex.dat[,i])) {
col_data <- c(col_data, i)
}
}
if (length(col_data)>0) {
ex.dat1 <- ex.dat[,-col_data]
}
else {
ex.dat1 <- ex.dat
}
value_1_1 = value_1-length(col_data)
value_2_1 = value_2-length(col_data)
value_3_1 = value_3-length(col_data)
ans.gam <- sensitivity(ex.dat1, x.pos=1:value_1_1, y.pos=value_2_1:value_3_1, surface='gam')
print(ans.gam)
return(ex.dat)
}
#run the function main
main('GAM','3')
#normalization 0~1
normalit<-function(m){
(m - min(m))/(max(m)-min(m))
}
main <- function(method,building_type) {
#install all the packages that are needed
#install.packages('corpcor', repos='http://cran.rstudio.com/')
#install.packages('fields', repos='http://cran.rstudio.com/')
#install.packages('gam', repos='http://cran.rstudio.com/')
#install.packages('gbm', repos='http://cran.rstudio.com/')
#install.packages('locfit', repos='http://cran.rstudio.com/')
#install.packages('maptree', repos='http://cran.rstudio.com/')
#install.packages('mda', repos='http://cran.rstudio.com/')
#install.packages('mlegp', repos='http://cran.rstudio.com/')
#install.packages('polspline', repos='http://cran.rstudio.com/')
#install.packages('quadprog', repos='http://cran.rstudio.com/')
#install.packages('randomForest', repos='http://cran.rstudio.com/')
#install.packages('spam', repos='http://cran.rstudio.com/')
#install.packages('tgp', repos='http://cran.rstudio.com/')
#install.packages('./CompModSA_1.2.tar.gz', repos = NULL, type = 'source')
#load the package CompModSA and related packages
library('CompModSA', lib.loc='~/R/x86_64-pc-linux-gnu-library/3.3')
#install package RMySQL
#install.packages('./RMySQL_0.10.13.tar.gz', repos = NULL, type = 'source')
#load the package RMySQL
library('RMySQL')
database <- dbConnect(MySQL(),user="root",db="ashrae1771",host="localhost")
data <- dbReadTable(database,"detaildata1")
#select data
line_data <- c()
for (row in 1:nrow(data)) {
if (as.numeric(data[row,1]) != as.numeric(building_type)) {
line_data <- c(line_data, row)
}
}
if (length(line_data)>0) {
data1 <- data[-line_data,]
} else {
data1 <- data
}
#transfer all values in the matrix into float
for (row in 1:nrow(data1)) {
data1[order(as.numeric(row)),]
}
#normalization 0~1
ex.dat <- apply(data1,2,normalit)
ex.dat[is.nan(ex.dat)] <- 1
#prepare the input and output
value_1 = as.numeric('5')
value_2 = value_1+1
value_3 = as.numeric('5')+as.numeric('2')
#select method
#GAM
col_data <- c()
for (i in 1:ncol(ex.dat)) {
if (max(ex.dat[,i]) == min(ex.dat[,i])) {
col_data <- c(col_data, i)
}
}
if (length(col_data)>0) {
ex.dat1 <- ex.dat[,-col_data]
}
else {
ex.dat1 <- ex.dat
}
as.matrix(sapply(ex.dat1, as.numeric))
value_1_1 = value_1-length(col_data)
value_2_1 = value_2-length(col_data)
value_3_1 = value_3-length(col_data)
ans.gam <- sensitivity(ex.dat1, x.pos=1:value_1_1, y.pos=value_2_1:value_3_1, surface='gam')
print(ans.gam)
return(ex.dat)
}
#run the function main
main('GAM','3')
ormalization 0~1
normalit<-function(m){
(m - min(m))/(max(m)-min(m))
}
main <- function(method,building_type) {
#install all the packages that are needed
#install.packages('corpcor', repos='http://cran.rstudio.com/')
#install.packages('fields', repos='http://cran.rstudio.com/')
#install.packages('gam', repos='http://cran.rstudio.com/')
#install.packages('gbm', repos='http://cran.rstudio.com/')
#install.packages('locfit', repos='http://cran.rstudio.com/')
#install.packages('maptree', repos='http://cran.rstudio.com/')
#install.packages('mda', repos='http://cran.rstudio.com/')
#install.packages('mlegp', repos='http://cran.rstudio.com/')
#install.packages('polspline', repos='http://cran.rstudio.com/')
#install.packages('quadprog', repos='http://cran.rstudio.com/')
#install.packages('randomForest', repos='http://cran.rstudio.com/')
#install.packages('spam', repos='http://cran.rstudio.com/')
#install.packages('tgp', repos='http://cran.rstudio.com/')
#install.packages('./CompModSA_1.2.tar.gz', repos = NULL, type = 'source')
#load the package CompModSA and related packages
library('CompModSA', lib.loc='~/R/x86_64-pc-linux-gnu-library/3.3')
#install package RMySQL
#install.packages('./RMySQL_0.10.13.tar.gz', repos = NULL, type = 'source')
#load the package RMySQL
library('RMySQL')
database <- dbConnect(MySQL(),user="root",db="ashrae1771",host="localhost")
data <- dbReadTable(database,"detaildata1")
#select data
line_data <- c()
for (row in 1:nrow(data)) {
if (as.numeric(data[row,1]) != as.numeric(building_type)) {
line_data <- c(line_data, row)
}
}
if (length(line_data)>0) {
data1 <- data[-line_data,]
} else {
data1 <- data
}
#transfer all values in the matrix into float
for (row in 1:nrow(data1)) {
data1[order(as.numeric(row)),]
}
#normalization 0~1
ex.dat <- apply(data1,2,normalit)
ex.dat[is.nan(ex.dat)] <- 1
#prepare the input and output
value_1 = as.numeric('5')
value_2 = value_1+1
value_3 = as.numeric('5')+as.numeric('2')
#select method
#GAM
col_data <- c()
for (i in 1:ncol(ex.dat)) {
if (max(ex.dat[,i]) == min(ex.dat[,i])) {
col_data <- c(col_data, i)
}
}
if (length(col_data)>0) {
ex.dat1 <- ex.dat[,-col_data]
}
else {
ex.dat1 <- ex.dat
}
value_1_1 = value_1-length(col_data)
value_2_1 = value_2-length(col_data)
value_3_1 = value_3-length(col_data)
ans.gam <- sensitivity(ex.dat1, x.pos=1:value_1_1, y.pos=value_2_1:value_3_1, surface='mars')
print(ans.gam)
return(ex.dat)
}
#run the function main
main('GAM','3')
#normalization 0~1
normalit<-function(m){
(m - min(m))/(max(m)-min(m))
}
main <- function(method,building_type) {
#install all the packages that are needed
#install.packages('corpcor', repos='http://cran.rstudio.com/')
#install.packages('fields', repos='http://cran.rstudio.com/')
#install.packages('gam', repos='http://cran.rstudio.com/')
#install.packages('gbm', repos='http://cran.rstudio.com/')
#install.packages('locfit', repos='http://cran.rstudio.com/')
#install.packages('maptree', repos='http://cran.rstudio.com/')
#install.packages('mda', repos='http://cran.rstudio.com/')
#install.packages('mlegp', repos='http://cran.rstudio.com/')
#install.packages('polspline', repos='http://cran.rstudio.com/')
#install.packages('quadprog', repos='http://cran.rstudio.com/')
#install.packages('randomForest', repos='http://cran.rstudio.com/')
#install.packages('spam', repos='http://cran.rstudio.com/')
#install.packages('tgp', repos='http://cran.rstudio.com/')
#install.packages('./CompModSA_1.2.tar.gz', repos = NULL, type = 'source')
#load the package CompModSA and related packages
library('CompModSA', lib.loc='~/R/x86_64-pc-linux-gnu-library/3.3')
#install package RMySQL
#install.packages('./RMySQL_0.10.13.tar.gz', repos = NULL, type = 'source')
#load the package RMySQL
library('RMySQL')
database <- dbConnect(MySQL(),user="root",db="ashrae1771",host="localhost")
data <- dbReadTable(database,"detaildata1")
#select data
line_data <- c()
for (row in 1:nrow(data)) {
if (as.numeric(data[row,1]) != as.numeric(building_type)) {
line_data <- c(line_data, row)
}
}
if (length(line_data)>0) {
data1 <- data[-line_data,]
} else {
data1 <- data
}
#transfer all values in the matrix into float
for (row in 1:nrow(data1)) {
data1[order(as.numeric(row)),]
}
#normalization 0~1
ex.dat <- apply(data1,2,normalit)
ex.dat[is.nan(ex.dat)] <- 1
#prepare the input and output
value_1 = as.numeric('5')
value_2 = value_1+1
value_3 = as.numeric('5')+as.numeric('2')
#select method
#GAM
col_data <- c()
for (i in 1:ncol(ex.dat)) {
if (max(ex.dat[,i]) == min(ex.dat[,i])) {
col_data <- c(col_data, i)
}
}
if (length(col_data)>0) {
ex.dat1 <- ex.dat[,-col_data]
}
else {
ex.dat1 <- ex.dat
}
value_1_1 = value_1-length(col_data)
value_2_1 = value_2-length(col_data)
value_3_1 = value_3-length(col_data)
ans.gam <- sensitivity(ex.dat1, x.pos=1:value_1_1, y.pos=value_2_1:value_3_1, surface='mars')
print(ans.gam)
return(ex.dat)
}
#run the function main
main('GAM','3')
install.packages('corpcor', repos='http://cran.rstudio.com/')
install.packages('fields', repos='http://cran.rstudio.com/')
install.packages('gam', repos='http://cran.rstudio.com/')
install.packages('gbm', repos='http://cran.rstudio.com/')
install.packages('locfit', repos='http://cran.rstudio.com/')
install.packages('maptree', repos='http://cran.rstudio.com/')
install.packages('mda', repos='http://cran.rstudio.com/')
install.packages('mlegp', repos='http://cran.rstudio.com/')
install.packages('polspline', repos='http://cran.rstudio.com/')
install.packages('quadprog', repos='http://cran.rstudio.com/')
install.packages('randomForest', repos='http://cran.rstudio.com/')
install.packages('spam', repos='http://cran.rstudio.com/')
install.packages('tgp', repos='http://cran.rstudio.com/')
install.packages('./CompModSA_1.2.tar.gz', repos = NULL, type = 'source')
library('CompModSA', lib.loc='~/R/x86_64-pc-linux-gnu-library/3.3')
main <- function() {
ex.dat <- read.table('http://www.stat.unm.edu/~storlie/CompModSA/ex_data.txt', header = T)
#LIN_REG
ans.reg <- sensitivity(ex.dat, x.pos=1:10, y.pos=11:12, surface='gam')
return(ans.reg)
}
main()
install.packages("fields", repos = "http://cran.rstudio.com/")
main <- function() {
ex.dat <- read.table('http://www.stat.unm.edu/~storlie/CompModSA/ex_data.txt', header = T)
#LIN_REG
ans.reg <- sensitivity(ex.dat, x.pos=1:10, y.pos=11:12, surface='gam')
return(ans.reg)
}
main()
library("CompModSA", lib.loc="~/R/x86_64-pc-linux-gnu-library/3.3")
in <- function() {
ex.dat <- read.table('http://www.stat.unm.edu/~storlie/CompModSA/ex_data.txt', header = T)
#LIN_REG
ans.reg <- sensitivity(ex.dat, x.pos=1:10, y.pos=11:12, surface='gam')
return(ans.reg)
}
main()
main <- function() {
ex.dat <- read.table('http://www.stat.unm.edu/~storlie/CompModSA/ex_data.txt', header = T)
#LIN_REG
ans.reg <- sensitivity(ex.dat, x.pos=1:10, y.pos=11:12, surface='gam')
print(ans.reg)
return(ans.reg)
}
main()
library("CompModSA", lib.loc="~/R/x86_64-pc-linux-gnu-library/3.3")
ain <- function() {
ex.dat <- read.table('http://www.stat.unm.edu/~storlie/CompModSA/ex_data.txt', header = T)
#LIN_REG
ans.reg <- sensitivity(ex.dat, x.pos=1:10, y.pos=11:12, surface='gam')
print(ans.reg)
return(ans.reg)
}
main()
main <- function() {
ex.dat <- read.table('http://www.stat.unm.edu/~storlie/CompModSA/ex_data.txt', header = T)
#LIN_REG
ans.reg <- sensitivity(ex.dat, x.pos=1:10, y.pos=11:12, surface='gam')
print(ans.reg)
return(ans.reg)
}
main()
ain <- function() {
ex.dat <- read.table('http://www.stat.unm.edu/~storlie/CompModSA/ex_data.txt', header = T)
#LIN_REG
ans.reg <- sensitivity(ex.dat, x.pos=1:10, y.pos=11:12, surface='gam', CI=T)
print(ans.reg)
return(ans.reg)
}
main()
ain <- function() {
ex.dat <- read.table('http://www.stat.unm.edu/~storlie/CompModSA/ex_data.txt', header = T)
#LIN_REG
ans.reg <- sensitivity(ex.dat, x.pos=1:10, y.pos=11:12, surface='mars', CI=T)
print(ans.reg)
return(ans.reg)
}
main()
## Read in some data for illustration
ex.dat <- read.table("http://www.stat.unm.edu/~storlie/CompModSA/ex_data.txt", header = T)
## run a sensitivity analysis using quadratic regression
## on the inputs in columns 1-10 and output in columns 11-12 of ex.dat.
ans.rs <- sensitivity(ex.dat, x.pos=1:10, y.pos=11:12, surface='rs.reg')
print(ans.rs)
## run the same SA as above with bootstrap CI's for the T index.
ans.boot <- sensitivity(ex.dat, x.pos=1:10, y.pos=11:12, surface='rs.reg',
control=list(CI=T, n.CI=25, n.mc.CI=1000))
print(ans.boot)
data <- matrix(c(3:14), nrow=4, byrow=TRUE)
print(data)
data <- matrix(c(3:14), nrow=4, byrow=TRUE)
for (row in 1:nrow(data)) {
data[row,2] <- data[row,2]*2
}
print(data)
library("CompModSA", lib.loc="~/R/x86_64-pc-linux-gnu-library/3.3")
library("CompModSA", lib.loc="~/R/x86_64-pc-linux-gnu-library/3.3")
View(Xr..)
data <- read.table('~/CZ1A.ods')
file_name <- paste('~/CZ1A.txt',sep='')
sink(file_name)
ans.rpreg <- sensitivity(data, x.pos=1:9, y.pos=10:11, surface='tree',control=list(CI=T, n.CI=25, n.mc.CI=1000))
print(ans.rpreg)
sink()
sink()
data <- read.csv('~/CZ1A.csv')
file_name <- paste('~/CZ1A.txt',sep='')
sink(file_name)
ans.rpreg <- sensitivity(data, x.pos=1:9, y.pos=10:11, surface='tree',control=list(CI=T, n.CI=25, n.mc.CI=1000))
print(ans.rpreg)
sink()
data <- read.csv('./CZ1A.csv')
data <- read.csv('~/Documents/Large_Scale_Simulation/Model_Check/Task3/MO/ffd_sa/pre_post/SA/CZ1A.csv')
#load the package CompModSA and related packages
library('CompModSA', lib.loc='~/R/x86_64-pc-linux-gnu-library/3.3')
setwd("~/Documents/Large_Scale_Simulation/Task_4_pdf_V5/1_Sensitivity_Analysis/4_Warehouse/Pre-1980/results")
path_location <- getwd()
data <- read.csv(paste(path_location,'/results/',result_file_name,'.csv',sep=""), header=FALSE, sep=",")
setwd("~/Documents/Large_Scale_Simulation/Task_4_pdf_V5/1_Sensitivity_Analysis/4_Warehouse/Pre-1980/results")
data <- read.csv(paste(path_location,'/results/energy_data_np_1.csv',sep=""), header=FALSE, sep=",")
data <- read.csv(paste(path_location,'/energy_data_np_1.csv',sep=""), header=FALSE, sep=",")
#select data
data1 <- data[data[,2]==cz,3:ncol(data)]
#transfer all values in the matrix into float
for (row in 1:nrow(data1)) {
data1[order(as.numeric(row)),]
}
#normalization 0~1
ex.dat <- apply(data1,2,normalit)
ex.dat[is.nan(ex.dat)] <- 1
#prepare the input and output
value_1 = ncol(data1)-2
value_2 = value_1 + 1
value_3 = ncol(data1)-1
View(data1)
View(data1)
View(data)
#select data
data1 <- data[data[,2]=='1A',3:ncol(data)]
#transfer all values in the matrix into float
for (row in 1:nrow(data1)) {
data1[order(as.numeric(row)),]
}
View(data1)
#normalization 0~1
normalit<-function(m){
(m - min(m))/(max(m)-min(m))
}
#normalization 0~1
ex.dat <- apply(data1,2,normalit)
ex.dat[is.nan(ex.dat)] <- 1
View(ex.dat)
#prepare the input and output
value_1 = ncol(data1)-2
value_2 = value_1 + 1
value_3 = ncol(data1)-1
#LIN_REG
col_data <- c()
for (i in 1:ncol(ex.dat)) {
if (max(ex.dat[,i]) == min(ex.dat[,i])) {
col_data <- c(col_data, i)
}
}
if (length(col_data)>0) {
ex.dat1 <- ex.dat[,-col_data]
}
else {
ex.dat1 <- ex.dat
}
View(ex.dat1)
#LIN_REG
col_data <- c()
for (i in 1:ncol(ex.dat)-2) {
if (max(ex.dat[,i]) == min(ex.dat[,i])) {
col_data <- c(col_data, i)
}
}
#LIN_REG
col_data <- c()
for (i in 1:(ncol(ex.dat)-2)) {
if (max(ex.dat[,i]) == min(ex.dat[,i])) {
col_data <- c(col_data, i)
}
}
if (length(col_data)>0) {
ex.dat1 <- ex.dat[,-col_data]
}
else {
ex.dat1 <- ex.dat
}
if (length(col_data)>0) {
ex.dat1 <- ex.dat[,-col_data]
} else {
ex.dat1 <- ex.dat
}
value_1_1 = value_1-length(col_data)
value_2_1 = value_2-length(col_data)
value_3_1 = value_3-length(col_data)
